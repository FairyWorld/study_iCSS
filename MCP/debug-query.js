#!/usr/bin/env node

import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ÂàõÂª∫‰∏Ä‰∏™PromiseÊù•Â§ÑÁêÜÊúçÂä°Âô®ÂìçÂ∫î
function queryServer(command) {
  return new Promise((resolve, reject) => {
    console.log('\nüîÑ Starting server process...');
    
    const serverProcess = spawn('node', ['debug-local.js'], {
      cwd: __dirname,
      stdio: ['pipe', 'pipe', 'inherit']
    });

    let responseData = '';
    let serverReady = false;
    let commandSent = false;
    let searchResults = null;

    // ÁõëÂê¨ÊúçÂä°Âô®ËæìÂá∫
    serverProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log('\nüì• Received data:', output);
      
      // Ê£ÄÊü•ÊúçÂä°Âô®ÊòØÂê¶Â∑≤ÁªèÂáÜÂ§áÂ•Ω
      if (output.includes('Search index loaded with') && !serverReady) {
        serverReady = true;
        console.log('\nüöÄ Server is ready, waiting 1s before sending query...');
        
        // Âª∂ËøüÂèëÈÄÅÂëΩ‰ª§ÔºåÁ°Æ‰øùÊúçÂä°Âô®ÂÆåÂÖ®ÂáÜÂ§áÂ•Ω
        setTimeout(() => {
          console.log('\nüì§ Sending query command...');
          serverProcess.stdin.write(JSON.stringify(command) + '\n');
          commandSent = true;
        }, 1000);
      }

      // Â∞ùËØïËß£ÊûêÊêúÁ¥¢ÁªìÊûú
      try {
        if (output.includes('"result"')) {
          const jsonStart = output.indexOf('{');
          const jsonEnd = output.lastIndexOf('}') + 1;
          if (jsonStart !== -1 && jsonEnd !== -1) {
            const jsonStr = output.substring(jsonStart, jsonEnd);
            const result = JSON.parse(jsonStr);
            if (result.result) {
              searchResults = result;
              console.log('\n‚ú® Found search results:', JSON.stringify(result, null, 2));
              // ÊâæÂà∞ÁªìÊûúÂêéÂÖ≥Èó≠ÊúçÂä°Âô®
              serverProcess.kill();
              resolve(result);
            }
          }
        }
      } catch (e) {
        console.log('Not a JSON response:', e.message);
      }
      
      // Êî∂ÈõÜÂìçÂ∫îÊï∞ÊçÆ
      responseData += output;
    });

    // ËÆæÁΩÆË∂ÖÊó∂
    setTimeout(() => {
      if (!commandSent) {
        console.log('\n‚ö†Ô∏è Warning: Command was never sent, server might not be ready');
      }
      if (!searchResults) {
        console.log('\n‚ö†Ô∏è Warning: No search results received');
      }
      console.log('\n‚úÖ Query completed, shutting down server...\n');
      serverProcess.kill();
      resolve(searchResults || responseData);
    }, 8000);

    // ÈîôËØØÂ§ÑÁêÜ
    serverProcess.on('error', (error) => {
      console.error('‚ùå Error:', error);
      reject(error);
    });
  });
}

// ÊµãËØïÊü•ËØ¢
const testQuery = {
  jsonrpc: "2.0",
  id: 2,
  method: "tools/call",
  params: {
    name: "search_css_techniques",
    arguments: {
      query: "gradient border",
      limit: 3
    }
  }
};

console.log('üìù Executing query:', JSON.stringify(testQuery, null, 2));

// ÊâßË°åÊü•ËØ¢
queryServer(testQuery)
  .then(response => {
    console.log('üì¨ Final response:', JSON.stringify(response, null, 2));
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }); 